[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Timesheet",
  "enabled": 0,
  "modified": "2025-07-08 09:02:45.904419",
  "module": "Custom Fields",
  "name": "timesheet",
  "script": "frappe.ui.form.on('Timesheet', {\n    onload: function(frm) {\n        frm.trigger('update_overtime_fields');\n        frm.trigger('check_holidays');\n    },\n\n    validate: function(frm) {\n        frm.trigger('update_overtime_fields');\n        frm.trigger('check_holidays');\n    },\n\n    update_overtime_fields: function(frm) {\n        const max_rt_hours = 9 + (30 / 60); // 9 Hours 30 Minutes in decimal hours: 9.5\n\n        frm.doc.time_logs.forEach(function(row) {\n            if (row.hours) {\n                const total_hours = parseFloat(row.hours); // Convert hours to a decimal number\n\n                frappe.call({\n                    method: 'frappe.client.get',\n                    args: {\n                        doctype: 'Employee',\n                        name: frm.doc.employee // Ensure this field is correctly referenced\n                    },\n                    callback: function(r) {\n                        if (r.message) {\n                            const employee = r.message;\n                            if (employee.custom_applicable_for_overtine) {\n                                row.custom_ot_1 = total_hours > max_rt_hours ? total_hours - max_rt_hours : 0;\n                            } else {\n                                row.custom_ot_1 = 0;\n                            }\n                            frm.refresh_field('time_logs'); // Refresh only the affected row\n                        }\n                    }\n                });\n            } else {\n                row.custom_ot_1 = 0;\n            }\n        });\n\n        // Refresh the child table to ensure all fields are updated\n        frm.refresh_field('time_logs');\n    },\n\n    check_holidays: function(frm) {\n        // Fetch employee record first\n        frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                doctype: 'Employee',\n                name: frm.doc.employee // Ensure this field is correctly referenced\n            },\n            callback: function(r) {\n                if (r.message) {\n                    const employee = r.message;\n                    const holiday_list_name = employee.holiday_list;\n                    console.log(\"Holiday List Name:\", holiday_list_name); // Debugging line\n\n                    if (holiday_list_name) {\n                        frappe.call({\n                            method: 'frappe.client.get',\n                            args: {\n                                doctype: 'Holiday List',\n                                filters: { name: holiday_list_name },\n                                fields: ['holidays']\n                            },\n                            callback: function(r) {\n                                console.log(\"Holiday List Data:\", r.message);\n\n                                if (r.message && r.message.holidays) {\n                                    const holidays = r.message.holidays;\n\n                                    frm.doc.time_logs.forEach(function(row) {\n                                        if (row.from_time) {\n                                            const from_time = new Date(row.from_time);\n                                            const from_time_date = from_time.toISOString().split('T')[0]; // Convert to YYYY-MM-DD\n\n                                            console.log(\"From Time Date:\", from_time_date);\n\n                                            let holiday_found = false;\n                                            holidays.forEach(function(holiday) {\n                                                const holiday_date = new Date(holiday.holiday_date).toISOString().split('T')[0]; // Convert to YYYY-MM-DD\n                                                console.log(\"Checking Holiday Date:\", holiday_date);\n                                                if (holiday_date === from_time_date) {\n                                                    holiday_found = true;\n                                                    console.log(\"Holiday Found:\", holiday_date);\n                                                }\n                                            });\n\n                                            if (holiday_found) {\n                                                if (employee.custom_applicable_for_overtine) {\n                                                    row.custom_ot_2 = row.hours; // Set to hours field value\n                                                    row.custom_ot_1 = 0; // Clear custom_ot_1 if custom_ot_2 is set\n                                                    console.log(\"Setting custom_ot_2:\", row.custom_ot_2);\n                                                } else {\n                                                    row.custom_ot_2 = 0;\n                                                }\n                                                frm.refresh_field('time_logs'); // Refresh only the affected row\n                                            }\n                                        }\n                                    });\n\n                                    // Refresh the child table to ensure all fields are updated\n                                    frm.refresh_field('time_logs');\n                                } else {\n                                    console.error(\"No holidays found for the specified Holiday List.\");\n                                }\n                            }\n                        });\n                    } else {\n                        console.error(\"Holiday list name not found in the employee record.\");\n                    }\n                }\n            }\n        });\n    }\n});\n\n// Client script for the Timesheet Detail child table\nfrappe.ui.form.on('Timesheet Detail', {\n    hours: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (row.hours) {\n            frm.trigger('update_overtime_fields');\n            frm.trigger('check_holidays');\n        }\n    },\n\n    from_time: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (row.from_time) {\n            frm.trigger('check_holidays');\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-07-08 09:02:45.837975",
  "module": "Custom Fields",
  "name": "Fetch Grade and Term in invoice",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    customer: function(frm) {\n        if (frm.doc.customer) {\n            frappe.call({\n                method: 'frappe.client.get_list',\n                args: {\n                    doctype: 'Program Enrollment',\n                    filters: { student_name: frm.doc.customer_name },\n                    fields: ['program', 'academic_year'],\n                    limit_page_length: 1\n                },\n                callback: function(response) {\n                    if (response.message && response.message.length > 0) {\n                        let enrollment = response.message[0];\n                        frm.set_value('custom_grade', enrollment.program);\n                        frm.set_value('custom_academic_year', enrollment.academic_year);\n                    } else {\n                        frappe.msgprint(__('No matching Program Enrollment found.'));\n                    }\n                }\n            });\n        } else {\n            frm.set_value('custom_grade', '');\n            frm.set_value('custom_academic_year', '');\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 1,
  "modified": "2025-08-07 11:55:36.700705",
  "module": "Custom Fields",
  "name": "Fetch Grade and Term for Payment",
  "script": "frappe.ui.form.on('Payment Entry', {\r\n    refresh: function(frm) {\r\n        // إذا كان حقلا grade أو academic year فارغين\r\n        if (\r\n            !frm.doc.custom_grade || !frm.doc.custom_academic_year\r\n        ) {\r\n            check_and_update_enrollment(frm);\r\n        }\r\n    }\r\n});\r\n\r\nfunction check_and_update_enrollment(frm) {\r\n    // تحقق من وجود قيمة في party_name\r\n    if (frm.doc.party && frm.doc.party_name) {\r\n        frappe.call({\r\n            method: 'frappe.client.get_list',\r\n            args: {\r\n                doctype: 'Program Enrollment',\r\n                filters: { student_name: frm.doc.party_name },\r\n                fields: ['program', 'academic_year'],\r\n                limit_page_length: 1\r\n            },\r\n            callback: function(response) {\r\n                if (response.message && response.message.length > 0) {\r\n                    let enrollment = response.message[0];\r\n                    let grade_changed = frm.doc.custom_grade !== enrollment.program;\r\n                    let year_changed = frm.doc.custom_academic_year !== enrollment.academic_year;\r\n\r\n                    // حدّث فقط إذا فيه اختلاف\r\n                    if (grade_changed || year_changed) {\r\n                        frm.set_value('custom_grade', enrollment.program);\r\n                        frm.set_value('custom_academic_year', enrollment.academic_year);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-07-08 09:02:45.731557",
  "module": "Custom Fields",
  "name": "create_discount_sales_invoice2",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    refresh: function(frm) {\n        if (frm.doc.docstatus === 1) { // التأكد من أن الفاتورة Submitted فقط\n            frm.add_custom_button(__('Invoice✨Discount'), function() {\n                if (!frm.doc.custom_discount_after_submit || frm.doc.custom_discount_after_submit <= 0) {\n                    frappe.msgprint(__('No discount amount to process.'));\n                    return;\n                }\n\n                if (frm.doc.outstanding_amount <= 0) {\n                    frappe.msgprint(__('لا يمكن الخصم العميل حسابة صفر.'));\n                    return;\n                }\n\n                let discount_amount = frm.doc.custom_discount_after_submit;\n                let total_taxes = frm.doc.total_taxes_and_charges || 0; // التحقق من وجود ضريبة\n                let net_total = frm.doc.net_total;\n\n                if (net_total <= 0) {\n                    frappe.msgprint(__('خطأ: إجمالي الأصناف غير صحيح.'));\n                    return;\n                }\n\n                let tax_deducted = 0;\n                let net_discount = discount_amount;\n\n                // في حالة وجود ضرائب، يتم احتساب الجزء الخاص بها\n                if (total_taxes > 0) {\n                    let tax_rate = total_taxes / net_total;\n                    tax_deducted = discount_amount * tax_rate;\n                    net_discount = discount_amount - tax_deducted;\n                }\n\n                // التحقق من توازن القيد قبل الإدراج\n                let total_credit = discount_amount;\n                let total_debit = tax_deducted + net_discount;\n\n                if (Math.abs(total_credit - total_debit) > 0.01) {\n                    frappe.msgprint(__('خطأ في توزيع القيد: الدائن ({0}) لا يساوي المدين ({1}).', [total_credit, total_debit]));\n                    return;\n                }\n\n                // تجهيز الحسابات المالية\n                let accounts = [\n                    {\n                        account: \"1310 - مدينون - AS\",\n                        party_type: \"Customer\",\n                        party: frm.doc.customer,\n                        credit_in_account_currency: discount_amount,\n                        reference_type: \"Sales Invoice\",\n                        reference_name: frm.doc.name\n                    },\n                    {\n                        account: \"5114 - خصم مسموح به - AS\",\n                        debit_in_account_currency: net_discount\n                    }\n                ];\n\n                // إضافة حساب الضريبة فقط في حالة وجود ضرائب\n                if (tax_deducted > 0) {\n                    accounts.push({\n                        account: \"GST - AS\",\n                        debit_in_account_currency: tax_deducted\n                    });\n                }\n\n                frappe.call({\n                    method: \"frappe.client.insert\",\n                    args: {\n                        doc: {\n                            doctype: \"Journal Entry\",\n                            posting_date: frappe.datetime.nowdate(),\n                            cheque_no: frm.doc.name,\n                            cheque_date: frm.doc.posting_date,\n                            accounts: accounts\n                        }\n                    },\n                    callback: function(response) {\n                        if (response.message) {\n                            let journal_entry_no = response.message.name;\n                            let journal_entry_date = response.message.posting_date;\n\n                            frappe.msgprint(__('Journal Entry Created: ' + journal_entry_no));\n\n                            frappe.db.get_value(\"Sales Invoice\", frm.doc.name, \"custom_discount_qty\")\n                                .then(r => {\n                                    let current_qty = r.message.custom_discount_qty || 0;\n                                    let new_discount_qty = parseInt(current_qty) + 1;\n\n                                    frappe.call({\n                                        method: \"frappe.client.set_value\",\n                                        args: {\n                                            doctype: \"Sales Invoice\",\n                                            name: frm.doc.name,\n                                            fieldname: {\n                                                \"custom_discount_entry_no\": journal_entry_no,\n                                                \"custom_discount_date\": journal_entry_date,\n                                                \"custom_discount_qty\": new_discount_qty\n                                            }\n                                        },\n                                        callback: function(res) {\n                                            if (!res.exc) {\n                                                frm.reload_doc();\n                                            }\n                                        }\n                                    });\n                                });\n                        }\n                    }\n                });\n\n            }).addClass(\"btn-danger\");\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Student Group",
  "enabled": 1,
  "modified": "2025-07-08 09:02:45.676512",
  "module": "Custom Fields",
  "name": "Student Payment Group",
  "script": "frappe.ui.form.on('Student Group', {\r\n    get_students: function(frm) {\r\n        // 1. التحقق من وجود البرنامج والطلاب\r\n        if (!frm.doc.program) {\r\n            frappe.msgprint(\"❌ لم يتم تحديد برنامج في مجموعة الطلاب!\");\r\n            return;\r\n        }\r\n\r\n        const new_students = (frm.doc.students || []).filter(row => row.__islocal);\r\n        if (!new_students.length) {\r\n            frappe.msgprint(\"⚠️ لا يوجد طلاب جدد لإنشاء الفواتير.\");\r\n            return;\r\n        }\r\n\r\n        // 2. جلب قائمة Fee Schedules\r\n        frappe.db.get_list('Fee Schedule', {\r\n            filters: { program: frm.doc.program },\r\n            fields: ['name']\r\n        }).then(fee_schedules => {\r\n            if (!fee_schedules.length) {\r\n                frappe.msgprint(`❌ لا يوجد جدول رسوم للبرنامج \"${frm.doc.program}\"`);\r\n                return;\r\n            }\r\n\r\n            // 3. إنشاء مربع حوار اختيار Fee Schedule\r\n            let dialog = new frappe.ui.Dialog({\r\n                title: __(\"اختر جدول الرسوم\"),\r\n                fields: [{\r\n                    label: __(\"جدول الرسوم\"),\r\n                    fieldname: \"selected_fee_schedule\",\r\n                    fieldtype: \"Link\",\r\n                    options: \"Fee Schedule\",\r\n                    reqd: 1,\r\n                    filters: { program: frm.doc.program }\r\n                }],\r\n                primary_action_label: __(\"إنشاء الفواتير\"),\r\n                primary_action: function(values) {\r\n                    if (!values.selected_fee_schedule) return;\r\n                    \r\n                    dialog.hide();\r\n                    \r\n                    // 4. جلب بيانات Fee Schedule المحدد\r\n                    frappe.call({\r\n                        method: \"frappe.client.get\",\r\n                        args: {\r\n                            doctype: \"Fee Schedule\",\r\n                            name: values.selected_fee_schedule\r\n                        },\r\n                        callback: function(response) {\r\n                            const fee_doc = response.message;\r\n                            \r\n                            if (!fee_doc.components || fee_doc.components.length === 0) {\r\n                                frappe.msgprint(\"⚠️ لا توجد مكونات رسوم في الجدول المحدد!\");\r\n                                return;\r\n                            }\r\n\r\n                            // 5. إنشاء فواتير لكل طالب مع نقل بيانات الجدول\r\n                            Promise.all(new_students.map(student_row => {\r\n                                return frappe.db.get_doc('Student', student_row.student)\r\n                                    .then(student_doc => {\r\n                                        if (!student_doc.customer) {\r\n                                            frappe.msgprint(`🚫 لا يوجد عميل للطالب ${student_row.student}`);\r\n                                            return null;\r\n                                        }\r\n\r\n                                        // 6. نقل بيانات الجدول components إلى الفاتورة\r\n                                        const invoice_items = fee_doc.components.map(component => {\r\n                                            return {\r\n                                                item_code: component.item,\r\n                                                item_name: component.description || \"رسوم دراسية\",\r\n                                                qty: component.qty || 1,\r\n                                                rate: component.amount,\r\n                                                income_account: component.income_account || \"4110 - مبيعات - AS\",\r\n                                                cost_center: component.cost_center || frappe.defaults.get_default(\"cost_center\")\r\n                                            };\r\n                                        });\r\n\r\n                                        // 7. إنشاء الفاتورة كمسودة أولاً\r\n                                        return frappe.call({\r\n                                            method: \"frappe.client.insert\",\r\n                                            args: {\r\n                                                doc: {\r\n                                                    doctype: \"Sales Invoice\",\r\n                                                    customer: student_doc.customer,\r\n                                                    fee_schedule: values.selected_fee_schedule,\r\n                                                    items: invoice_items,\r\n                                                    due_date: frappe.datetime.add_days(new Date(), 30),\r\n                                                    company: frappe.defaults.get_default(\"company\"),\r\n                                                    custom_grade: fee_doc.program,\r\n                                                    custom_academic_year: fee_doc.academic_year,\r\n                                                    student: student_row.student\r\n                                                }\r\n                                            },\r\n                                            callback: function(insert_response) {\r\n                                                if (!insert_response.exc) {\r\n                                                    // 8. الحصول على أحدث نسخة من المستند قبل التسجيل\r\n                                                    return frappe.call({\r\n                                                        method: \"frappe.client.get\",\r\n                                                        args: {\r\n                                                            doctype: \"Sales Invoice\",\r\n                                                            name: insert_response.message.name\r\n                                                        },\r\n                                                        callback: function(get_response) {\r\n                                                            // 9. تسجيل الفاتورة بعد التأكد من أحدث نسخة\r\n                                                            return frappe.call({\r\n                                                                method: \"frappe.client.submit\",\r\n                                                                args: {\r\n                                                                    doc: get_response.message\r\n                                                                }\r\n                                                            });\r\n                                                        }\r\n                                                    });\r\n                                                }\r\n                                                return null;\r\n                                            }\r\n                                        });\r\n                                    });\r\n                            })).then(results => {\r\n                                const success_count = results.filter(r => r && !r.exc).length;\r\n                                frappe.msgprint(`✅ تم إنشاء وتسجيل ${success_count} فاتورة بنجاح`);\r\n                                frm.reload_doc(); // إعادة تحميل المستند للتأكد من التحديثات\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n\r\n            dialog.show();\r\n        });\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Student Group",
  "enabled": 1,
  "modified": "2025-07-08 09:02:45.539454",
  "module": "Custom Fields",
  "name": "Student Payment Group2",
  "script": "frappe.ui.form.on('Student Group', {\r\n    refresh: function(frm) {\r\n        if (frm.doc.students && frm.doc.students.length > 0 && !frm.custom_buttons['create_invoices']) {\r\n            frm.add_custom_button(__('إنشاء فواتير'), function() {\r\n                show_fee_dialog(frm);\r\n            }, __('Actions'));\r\n            \r\n            frm.custom_buttons = frm.custom_buttons || {};\r\n            frm.custom_buttons['create_invoices'] = true;\r\n        }\r\n    },\r\n\r\n    students_add: function(frm) {\r\n        frm.refresh_field('students');\r\n    }\r\n});\r\n\r\nfunction show_fee_dialog(frm) {\r\n    if (!frm.doc.program) {\r\n        frappe.msgprint(\"❌ لم يتم تحديد برنامج في مجموعة الطلاب!\");\r\n        return;\r\n    }\r\n\r\n    frappe.db.get_list('Fee Schedule', {\r\n        filters: { program: frm.doc.program },\r\n        fields: ['name']\r\n    }).then(fee_schedules => {\r\n        if (!fee_schedules.length) {\r\n            frappe.msgprint(`❌ لا يوجد جدول رسوم للبرنامج \"${frm.doc.program}\"`);\r\n            return;\r\n        }\r\n\r\n        let dialog = new frappe.ui.Dialog({\r\n            title: __(\"إعدادات إنشاء الفواتير\"),\r\n            fields: [\r\n                {\r\n                    label: __(\"جدول الرسوم\"),\r\n                    fieldname: \"selected_fee_schedule\",\r\n                    fieldtype: \"Link\",\r\n                    options: \"Fee Schedule\",\r\n                    reqd: 1,\r\n                    filters: { program: frm.doc.program }\r\n                },\r\n                {\r\n                    fieldname: \"info\",\r\n                    fieldtype: \"HTML\",\r\n                    options: `<div style=\"color: #7575ff; font-weight: bold; margin-top: 10px;\">\r\n                                سيتم إنشاء فواتير للطلاب المحددين فقط\r\n                              </div>`\r\n                }\r\n            ],\r\n            primary_action_label: __(\"إنشاء الفواتير\"),\r\n            primary_action: function(values) {\r\n                dialog.hide();\r\n                create_invoices(frm, values.selected_fee_schedule);\r\n            }\r\n        });\r\n\r\n        dialog.show();\r\n    });\r\n}\r\n\r\nfunction create_invoices(frm, fee_schedule_name) {\r\n    let grid = frm.fields_dict.students.grid;\r\n    let students_to_process = grid.get_selected_children().filter(row => row.student);\r\n\r\n    if (!students_to_process.length) {\r\n        frappe.msgprint(\"⚠️ لم يتم تحديد أي طلاب لإنشاء الفواتير\");\r\n        return;\r\n    }\r\n\r\n    frappe.call({\r\n        method: \"frappe.client.get\",\r\n        args: {\r\n            doctype: \"Fee Schedule\",\r\n            name: fee_schedule_name\r\n        },\r\n        callback: function(response) {\r\n            const fee_doc = response.message;\r\n            \r\n            if (!fee_doc.components || fee_doc.components.length === 0) {\r\n                frappe.msgprint(\"⚠️ لا توجد مكونات رسوم في الجدول المحدد!\");\r\n                return;\r\n            }\r\n\r\n            frappe.db.get_list('Sales Invoice', {\r\n                filters: {\r\n                    fee_schedule: fee_schedule_name,\r\n                    docstatus: ['<', 2]\r\n                },\r\n                fields: ['name', 'student']\r\n            }).then(existing_invoices => {\r\n                const existing_students = existing_invoices.map(inv => inv.student);\r\n                let created_count = 0;\r\n                let skip_message_shown = false;\r\n\r\n                let promises = students_to_process.map(student_row => {\r\n                    return frappe.db.get_doc('Student', student_row.student)\r\n                        .then(student_doc => {\r\n                            if (!student_doc.customer) {\r\n                                frappe.msgprint(`🚫 لا يوجد عميل للطالب ${student_row.student}`);\r\n                                return null;\r\n                            }\r\n\r\n                            if (existing_students.includes(student_row.student)) {\r\n                                if (!skip_message_shown) {\r\n                                    frappe.msgprint(\"⚠️ يوجد فاتورة سابقة لنفس الطالب وجدول الرسوم\");\r\n                                    skip_message_shown = true;\r\n                                }\r\n                                return null;\r\n                            }\r\n\r\n                            const invoice_items = fee_doc.components.map(component => ({\r\n                                item_code: component.item,\r\n                                rate: component.amount,\r\n                                qty: component.qty || 1,\r\n                                income_account: component.income_account || \"4110 - مبيعات - AS\"\r\n                            }));\r\n\r\n                            // إنشاء الفاتورة معتمدة مباشرة (docstatus: 1)\r\n                            return frappe.call({\r\n                                method: \"frappe.client.insert\",\r\n                                args: {\r\n                                    doc: {\r\n                                        doctype: \"Sales Invoice\",\r\n                                        customer: student_doc.customer,\r\n                                        student: student_row.student,\r\n                                        fee_schedule: fee_schedule_name,\r\n                                        items: invoice_items,\r\n                                        due_date: frappe.datetime.add_days(new Date(), 30),\r\n                                        company: frappe.defaults.get_default(\"company\"),\r\n                                        custom_grade: fee_doc.program,\r\n                                        custom_academic_year: fee_doc.academic_year,\r\n                                        docstatus: 1 // فاتورة معتمدة مباشرة\r\n                                    }\r\n                                }\r\n                            }).then(insert_response => {\r\n                                created_count++;\r\n                                return insert_response.message.name;\r\n                            });\r\n                        });\r\n                });\r\n\r\n                Promise.all(promises).then(results => {\r\n                    const successful_invoices = results.filter(r => r);\r\n                    if (successful_invoices.length > 0) {\r\n                        frappe.msgprint({\r\n                            title: __(\"تم الإنشاء بنجاح\"),\r\n                            message: __(`✅ تم إنشاء ${successful_invoices.length} فاتورة معتمدة:<br>${successful_invoices.join('<br>')}`),\r\n                            indicator: 'green'\r\n                        });\r\n                    }\r\n                    frm.refresh();\r\n                });\r\n            });\r\n        }\r\n    });\r\n}",
  "view": "Form"
 }
]